// database
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// generator
generator server {
    provider             = "prisma-client-py"
    interface            = "asyncio"
    recursive_type_depth = -1
}

generator rss-scraper {
    provider = "cargo prisma"
    output   = "../rss-scraper/src/prisma.rs"
}

// data models
model Users {
    id         Int           @id @default(autoincrement())
    username   String        @unique
    created_at DateTime      @default(now())
    admin      Boolean       @default(false)
    login      UserLogins?
    cookies    UserCookies[]
}

model UserLogins {
    user     Users  @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    id       Int    @id
    password String
}

model UserCookies {
    user      Users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    user_id        Int
    cookie    String  @id
}

model NewsSources {
    id       Int            @id @default(autoincrement())
    name     String         @unique
    url      String         @unique
    rss      RssEntries[]
    articles NewsArticles[]
}

model RssEntries {
    source    NewsSources @relation(fields: [source_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    source_id Int
    feed      String      @id
}

model NewsArticles {
    id               Int                 @id @default(autoincrement())
    source           NewsSources         @relation(fields: [source_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    source_id        Int
    url              String              @unique
    title            String
    description      String?
    photo            String?
    publication_date DateTime?
    labels           NewsArticleLabels[]
    similar_relation SimilarArticles[]   @relation("similar_relation")
    similar_articles SimilarArticles[]   @relation("similar")
}

model SimilarArticles {
    article NewsArticles @relation("similar_relation", fields: [id1], references: [id], onUpdate: Cascade, onDelete: Cascade)
    id1     Int
    similar NewsArticles @relation("similar", fields: [id2], references: [id], onUpdate: Cascade, onDelete: Cascade)
    id2     Int
    @@id([id1, id2])
}

model Labels {
    name     String              @id
    articles NewsArticleLabels[]
}

model NewsArticleLabels {
    article      NewsArticles @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    id           Int
    label_object Labels       @relation(fields: [label], references: [name], onDelete: Cascade, onUpdate: Cascade)
    label        String
    @@id([id, label])
}