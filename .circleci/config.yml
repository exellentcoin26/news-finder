# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@2.4.1

jobs:
  prisma:
    resource_class: small
    docker:
      - image: python:3
        environment:
          DATABASE_URL: "postgres://user:password@127.0.0.1:5432/database"
    steps:
      - checkout
      - run:
          name: Install Prisma CLI
          command: pip3 install prisma
      - run:
          name: Validate prisma schema
          command: |
            cd db
            prisma validate

  pyright:
    resource_class: small
    docker:
      - image: python:3
    steps:
      - checkout
      - run:
          name: Install pip packages
          command: |
            cd server
            pip3 install .
      - run:
          name: Generate Prisma definitions
          command: |
            cd db
            prisma generate --generator server
      - run:
          name: Run pyright
          command: |
            cd server
            pyright .

  pytest:
    resource_class: small
    docker:
      - image: python:3
        environment:
          DATABASE_URL: postgres://ppdb_admin:admin@localhost:5432/ppdb_test
      - image: postgres:latest
        environment:
          POSTGRES_DB: ppdb_test
          POSTGRES_USER: ppdb_admin
          POSTGRES_PASSWORD: admin
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd server
            pip3 install .
      - run:
          name: Generate Prisma definitions
          command: |
            cd db
            prisma generate --generator server
      - run:
          name: Load tables to database
          command: |
            cd db
            prisma db push --skip-generate
      - run:
          name: Run pytest
          command: |
            cd server
            pytest

  tsc:
    resource_class: small
    docker:
      - image: node
    steps:
      - checkout
      - run:
          name: Install npm packages
          command: |
            cd client
            npm install
      - run:
          name: Run tsc
          command: |
            cd client
            npm run check

  eslint:
    resource_class: small
    docker:
      - image: node
    steps:
      - checkout
      - run:
          name: Install npm packages
          command: |
            cd client
            npm install
      - run:
          name: Run eslint
          command: |
            cd client
            npm run lint

  cargo:
    resource_class: small
    docker:
      - image: cimg/rust:1.68-node
    steps:
      - checkout
      - run:
          name: Install prisma cli
          command: npm install -g prisma
      - restore_cache:
          name: Restore cargo dependency cache
          keys:
            - cargo-deps-{{ checksum "rss-scraper/Cargo.lock" }}
      - restore_cache:
          name: Restore prisma generated files
          keys:
            - prisma-gen-{{ checksum "db/schema.prisma" }}
      - run:
          name: Generate prisma defitions if not exitst
          command: |
            if [ ! -f "rss-scraper/src/prisma.rs" ] ; then
              cd rss-scraper
              prisma generate --generator rss-scraper --schema ../db/schema.prisma
            fi
      - run:
          name: Run cargo check
          command: |
            cd rss-scraper
            cargo check --locked
      - save_cache:
          name: Save cargo dependencies to chache
          key: cargo-deps-{{ checksum "rss-scraper/Cargo.lock" }}
          paths:
            - rss-scraper/target
      - save_cache:
          name: Save prisma generated files to cache
          key: prisma-gen-{{ checksum "db/schema.prisma" }}
          paths:
            - rss-scraper/src/prisma.rs

  deploy-to-gcp:
    resource_class: small
    executor: gcp-cli/default
    steps:
      - checkout
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: Deploy application to google cloud
          command: gcloud --quiet compute ssh app@ppdb --tunnel-through-iap --command="$(cat scripts/deploy-docker-compose.sh)"
workflows:
  main:
    jobs:
      - prisma
      - pyright:
          requires:
            - prisma
      - pytest:
          requires:
            - pyright

      - tsc
      - eslint:
          requires:
            - tsc

      - cargo:
          requires:
            - prisma

      - deploy-to-gcp:
          filters:
            branches:
              only: main
          requires:
            - prisma
            - pyright
            - tsc
            - eslint
            - cargo
