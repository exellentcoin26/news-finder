services:
  caddy:
    image: caddy
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
    depends_on:
      server:
        condition: service_healthy
      client:
        condition: service_healthy
      db:
        condition: service_healthy
    links:
      - client
      - server

  db:
    image: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ppdb_admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: ppdb
    ports:
      - "5432:5432"
    volumes:
      - ./data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "ppdb_admin",
          "-d",
          "ppdb"
        ]
      interval: 30s
      timeout: 10s
      retries: 10

  db-migration:
    build:
      context: ../
      dockerfile: ./docker/migration/Dockerfile
    env_file: ./database-url.env
    depends_on:
      db:
        condition: service_healthy
    links:
      - db

  server:
    build:
      context: ../
      dockerfile: ./server/Dockerfile
    restart: unless-stopped
    env_file: ./database-url.env
    ports:
      - "1337:5000"
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully
    healthcheck:
      test: curl --fail -s http://localhost:5000/healthcheck || exit 1
      interval: 30s
      timeout: 10s
      retries: 10

  client:
    build: 
      context: ../
      dockerfile: ./client/Dockerfile
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      server:
        condition: service_healthy
    healthcheck:
      test: curl --fail -s http://localhost:8080 || exit 1
      interval: 30s
      timeout: 10s
      retries: 10

  rss-scraper:
    build:
      context: ../
      dockerfile: ./rss-scraper/Dockerfile
    restart: unless-stopped
    env_file: ./database-url.env
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully

  similarity-checker:
    build:
      context: ../
      dockerfile: ./similarity-checker/Dockerfile
    env_file: ./database-url.env
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully

  delete-old:
    build:
      context: ../
      dockerfile: ./old-articles/Dockerfile
    restart: unless-stopped
    env_file: ./database-url.env
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully

